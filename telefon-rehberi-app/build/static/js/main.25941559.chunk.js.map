{"version":3,"sources":["Components/List.js","Components/Form.js","Components/Contacts.js","Components/App.js","serviceWorker.js","index.js"],"names":["List","state","filterText","onChangeFilterText","e","_this","setState","target","value","_this2","this","filteredContacts","props","contacts","filter","contact","name","toLowerCase","indexOf","react_default","a","createElement","className","onChange","id","placeholder","map","key","phone","Component","Form","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","onSubmit","defineProperty","preventDefault","addContact","objectSpread","type","Contacts","src_Components_List","Components_Form","App","push","Components_Contacts","Boolean","window","location","hostname","match","ReactDOM","render","Components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25941559.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './List.css';\r\n\r\nclass List extends Component {\r\n\r\n    static propTypes = {\r\n        contacts: PropTypes.array.isRequired,\r\n    };\r\n\r\n    state = {\r\n        filterText: ''\r\n    };\r\n\r\n    onChangeFilterText = (e) => {\r\n        this.setState({\r\n            filterText: e.target.value\r\n        })\r\n    };\r\n\r\n    render() {\r\n        const filteredContacts = this.props.contacts.filter(\r\n            contact => {\r\n                return contact.name.toLowerCase().indexOf(\r\n                    this.state.filterText.toLowerCase()\r\n                ) !== -1\r\n            }\r\n        );\r\n\r\n\r\n        return (\r\n            <div className={\"listArea\"}>\r\n                <input\r\n                    value={this.state.filterText}\r\n                    onChange={this.onChangeFilterText}\r\n                    name={\"filter\"} id={'filter'} placeholder={'Filter by name or phone'}/>\r\n                <ul className={'list'}>\r\n                    {\r\n                        filteredContacts.map(contact =>\r\n                            <li key={contact.phone}>\r\n                                <span className={'name'}>{contact.name}</span>\r\n                                <span className={'phone'}>{contact.phone}</span>\r\n                                <span className={'clearfix'}/>\r\n                            </li>\r\n                        )\r\n                    }\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default List;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Form extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    static propTypes = {\r\n        addContact: PropTypes.func\r\n    };\r\n\r\n    state = {\r\n        name: '',\r\n        phone: ''\r\n    };\r\n\r\n    onChange(e){\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    onSubmit(e){\r\n        e.preventDefault();\r\n        this.props.addContact({\r\n            ...this.state\r\n        });\r\n\r\n        this.setState({\r\n            name: '',\r\n            phone: ''\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <input name={'name'} id={'name'} value={this.state.name}\r\n                           onChange={this.onChange} placeholder={'Enter a name'}/>\r\n                    <br/>\r\n                    <input name={'phone'} id={'phone'} type={'number'} value={this.state.phone}\r\n                           onChange={this.onChange} placeholder={'Enter a phone'}/>\r\n                    <button>Add</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport List from './List';\r\nimport Form from './Form';\r\n\r\nconst Contacts = props =>\r\n    <div>\r\n        <List contacts={props.contacts}/>\r\n        <Form addContact={props.addContact}/>\r\n    </div>;\r\n\r\nContacts.propTypes = {\r\n    contacts: PropTypes.array.isRequired,\r\n    addContact: PropTypes.func\r\n};\r\n\r\nexport default Contacts;","import React, { Component } from 'react';\nimport '../App.css';\n\nimport Contacts from './Contacts';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.addContact = this.addContact.bind(this);\n  }\n\n  state = {\n    contacts: [\n      {\n        name: 'Abdullah',\n        phone: '0 545 787 89 18'\n      },\n      {\n        name: 'Murat',\n        phone: '0 531 913 05 63'\n      }\n    ]\n  };\n\n  addContact(contact){\n    const { contacts } = this.state;\n    contacts.push(contact);\n\n    this.setState({\n        contacts: contacts\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Contacts\n            addContact={this.addContact}\n            contacts={this.state.contacts} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}